#####two sum from a list for a target

class Solution(object):
    def twoSum(self, nums, target):
        """
        :type nums: List[int]
        :type target: int
        :rtype: List[int]
        """
        preMap = {}
        for i, n in enumerate(nums):
            diff = target - n 
            if diff in preMap:
                return [preMap[diff],i]
            preMap[n]=i
        return


        


######## palindrome number 
class Solution(object):
    def isPalindrome(self, x):
        """
        :type x: int
        :rtype: bool
        """
        if x<0:
            return False
        div = 1
        while x >= 10 * div:
            div*=10

        while x:
            if x // div != x % 10:return False 
            x = (x % div) // 10 
            div = div/100

        return True

### roman to integer
class Solution(object):
    def romanToInt(self, s):
        """
        :type s: str
        :rtype: int
        """
        dic={'I': 1, 'V': 5, 'X':10, 'L': 50, 'C':100, 'D':500, 'M':1000}

        total = curr=prev = 0
        for i in range(len(s)):
            curr= dic[s[i]]
            if curr>prev:
                total=total+curr-2*prev
            else:
                total+=curr
            prev=curr
        return total

#### longest common prefix
class Solution(object):
    def longestCommonPrefix(self, strs):
        """
        :type strs: List[str]
        :rtype: str
        """
        res=""

        for i in range(len(strs[0])):
            for s in strs:
                if i==len(s) or s[i]!= strs[0][i]:
                    return res
            res+=strs[0][i]
        
        return res


##########valid parenthesis
class Solution(object):
    def isValid(self, s):
        """
        :type s: str
        :rtype: bool
        """
        stack =[]
        closeToOpen={'}':'{',']':'[', ')':'('}
        
        for c in s:
            if c in closeToOpen:
                if stack and stack[-1]==closeToOpen[c]:
                    stack.pop()
                else:
                    return False
            else:
                stack.append(c)
        return True if not stack else False
